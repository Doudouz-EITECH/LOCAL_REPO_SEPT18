public with sharing class SearchCourses_CC {
    
    /**
     *  This controller is used by the SearchCourses page.
     *  Users will select courses using the checkboxes and then click
     *  to see the upcoming course deliveries for those courses.
     */ 
     
    // Represents the main course list
    public List<CourseWrapper> courseList {
        get {
            if (courseList == null) {
                courseList = new List<CourseWrapper>();
                for (Course__c course : [SELECT Name, Certification__r.Name, 
                                        Duration__c, Status__c
                                      FROM Course__c]) {
                	courseList.add(new CourseWrapper(course));                                    
            	} 
            }                   
            return courseList;    
        }
        set;
    }
   
    /** TODO #1: Declare a read-only property that is a map, with the type Id for the key and
     *           the type CourseWrapper class for the value, named selectedCourses.	
	 *           The get property should include:
	 *             -- an if statement that, if the selectedCourses property is null
	 *                -- Assigns the property selectedCourses a new instance
     *                   of the Map
     *	           -- Return the selectedCourses property. 
	 *            Be sure to include the set property and make it private. 
	 */
    public Map<Id, CourseWrapper> selectedCourses {
        get {
            if (selectedCourses == null) {
                selectedCourses = new Map<Id, CourseWrapper>();
            }
            return selectedCourses;
        }
        private set;
    }
           
    // Action that is triggered from the "See Upcoming Course Deliveries" button
    public PageReference listDeliveries() {
	
        // TODO #2: Call the method clear of the selectedCourses property
        selectedCourses.clear();
		
        // Loop through all selected courses 
        for (CourseWrapper cw : courseList) {
            if (cw.checked) {
                System.debug('Course Selected: ' + cw.course.Name);
				
				/** TODO #3: Call the method put of the selectedCourses property
				 *           with the parameters cw.course.Id and cw
				 */
				selectedCourses.put(cw.course.Id, cw);
            }
        }
		System.debug('Number of courses selected: ' + selectedCourses.size());
		
		return null;
       
    }
   
    
    // Wrapper class
    public class CourseWrapper {
        public Course__c course {get; set;}
        public Boolean checked {get; set;}
        
        public CourseWrapper(Course__c c) {
            course = c;
            checked = false;
        }
    }

}
