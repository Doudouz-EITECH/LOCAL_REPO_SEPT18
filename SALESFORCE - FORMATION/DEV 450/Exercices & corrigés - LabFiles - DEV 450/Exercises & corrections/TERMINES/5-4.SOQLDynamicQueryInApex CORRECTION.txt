//TASK 1: Use a bound variable to specify filter criteria.
//--------------------------------------------------------------------------------------------
Integer numDays = 10;
List<Case> cases = [SELECT Id, Subject, CreatedDate
					FROM Case
					WHERE CreatedDate = LAST_N_DAYS:numDays];
System.debug('Total number of cases: ' + cases.size());

//TASK 2: Use Database.query() to repair the code from Task 1.
//--------------------------------------------------------------------------------------------
Integer numDays = 10;
String selectClause = 'SELECT Id, Subject, CreatedDate ';
String fromClause = 'FROM Case ';

//The code will use selectClause, fromClause, and whereClause to build a query at run
//time.
//TODO: Assign the whereClause variable the WHERE clause you will use to retrieve
//      only cases created within the last numDays. To create the string, begin with
//      a String literal that includes the WHERE keyword followed by the start of the expression
//      that checks if the value of the CreatedDate field equals the value of the LAST_N_DAYS
//      date literal, then concatenate the variable numDays to the string to complete the where clause.
String whereClause = 'WHERE CreatedDate = LAST_N_DAYS:' + numDays;

List<Case> cases = Database.query(selectClause + fromClause + whereClause);
System.debug('Total number of cases: ' + cases.size());
for (Case c : cases) {
    System.debug(c);
}

//(OPTIONAL) TASK 3: Find records created using a particular record type.
//--------------------------------------------------------------------------------------------

//TODO: Review the following code that returns the Id of a Record Type
Id productSupportId = Schema.SObjectType.Case.getRecordTypeInfosByName().
                          get('Product Support').getRecordTypeId();

String selectClause = 'SELECT Id, Status, Subject ';
String fromClause = 'FROM Case ';

//TODO: Define a string, whereClause, that will be used in
//      the Database.Query() statement below. The WHERE
//      clause you are constructing should determine if the RecordTypeId
//      field of the Case sObject (which is in the FROM clause) is
//      equal to the id value stored in the productSupportId variable.
//      To do this, assign the whereClause variable a value composed of 
//      3 parts concatenated together:
//      - A string literal that provides everything that should comprise the WHERE clause 
//        up to and including single quotation mark that should surround the id value
//        being provided by the productSupportId variable. (To include a single quotation
//        mark as part of the string, you will need to escape it with the \ character.)		  
//      - the variable productSupportId
//      - a string literal containing the closing single quotation mark.
String whereClause = 'WHERE RecordTypeId = \'' + productSupportId + '\'';

List<Case> cases = Database.query(selectClause + fromClause + whereClause);
System.debug('Total number of cases: ' + cases.size());
for (Case c : cases) {
    System.debug(c);
}

// NOTE [SELECT Id, Status, Subject FROM Case WHERE RecordType.Name='Product Support']
// works just fine as can follow the relationship to Record Type
